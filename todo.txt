- Move /gifts.html to /wishlist.html.

- Put a link to /wishlist.html on the front page.

- Move desired items from hardware-notes.md to /wishlist.txt.

- Add underlines to links in the site header, so it's evident where you can
  click

- Add 'Back to [parent page]' link at bottom of pages? Not strictly necessary
  because back button, but might be convenient?

- Make the site design responsive.

- Add HTTPS to the site. This protects from middlemen like ISPs injecting their
  own content, and also should prevent Chrome from saying "could not connect to
  site" when you just type www.nateeag.com (because it assumes HTTPS for bare
  domains).

- Protect photo galleries containing pictures of people with HTTP basic auth
  and by forcing redirects to HTTPS for secured pages. That requires I figure
  out a way to store the actual photo galleries outside the repo and include
  them at build time, so browsing the public repo doesn't just show you all the
  contents.
  https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/
  has what I need for a rough draft of this.

- Figure out a way to automagically do the right thing with links to draft
  pages. This necessarily involves figuring out some sort of abstraction to
  describe links in the first place, I suppose.

- Add protected gallery of Maryn's first birthday

- Finish up photo gallery design (Polaroid look, lightbox on click)

- Add note in /christianity/ about evangelism and include All The Crooked
  Saints quote that explains why the modern American version is an error: "This
  did not, as you might imagine, make Pete feel any better, as very few people
  are ever healed by being told a truth instead of feeling the truth for
  themselves."

- Make sure every folder has an index page. Right now /music/songwriting/
  is a 403 because it doesn't.

- Add build sanity check that every folder has an index page.

- Move all pages in drafts/ to pages/ and mark them as drafts via header
  metadata.

- Require -f flag to deploy if build exits with non-zero status (so I stop
  pushing out errors to prod).

- Run linkchecker locally as part of build process; exit non-zero status if it
  fails.

- Add external links archiving to the build process. An archived link is one
  that is available both in the wayback machine and also in a local archive,
  thus offering public and private backup copies which can be compared against
  each other to double-check accuracy.

- Support backwards-compatible article renames by walking Git history and
  generating a table of 302s for inclusion in the nginx config for every
  rename. Obviously you'd want to cache the rename history somehow so you don't
  have to walk all of history every time you build the site. Looks like maps
  could be highly pertinent: https://bjornjohansen.no/nginx-redirect

- Use setgid in deployment infrastructure to stop having to sudo for every
  single deployment. I think maybe the problem in my previous attempts was that
  I didn't recursively setgid, so child directories would probably have broken.
  Not sure about that but it's my best guess. I should probably capture the
  site's setup in a Vagrantfile/Ansible config so I can debug this without
  hurting production.

- Use rsync instead of cp for pre-deployment copy job so it works even if the
  previous attempt failed or was killed

- Extract site source file watcher from how-i-code project

- Extract chrome-watcher.sh from how-i-code project

- Generalize nginx config for static sites with Ansible

- Add argument against ice water to sustainability section. The rough idea is
  that the energy cost to populate the whole first world's beverages with ice
  is probably monumental, and if everyone just drank things warmer, we could
  save a lot of energy (and by proxy, carbon, since we still mostly burn fossil
  fuels). Ideally, do it in a reproducible research style (which would probably
  mean adding complexity to the rendering pipeline). I haven't done the math
  yet, so this idea may prove to be false - just thought it would be worth
  trying. Someone who did some ballpark figures here, though rather differently
  than I would like to:
  https://www.wired.com/2014/08/how-much-does-it-cost-to-make-ice/

- Add permalinks on page title header

- Add notes on what I like to work on and what tech stacks I like to work with.

- Add entry for Verse or Worse? I can't find the poems; not sure what I did
  with them.

- Move work/interests.html.yaml to software/interests.html.yaml

- Add base page for work history, with links to job summaries.

- Add project pages to expand on each project mentioned in the work history.

- Make links from "preferences" page to pages that comment on my feelings for
  and experience with the tech in question.

- Stop using absolute URLs for assets. I should be able to use relative within
  a folder, at least, and that would make renaming/reorganizing the folder
  structure easier.

- Polish JS Tetris and add it as a project

- Put up NoisePad + quick demo as evidence of my patch design efforts
